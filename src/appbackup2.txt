import "./App.css";
import Header from "./Mycomp/Header";
import Todos from "./Mycomp/Todos";
import Footer from "./Mycomp/Footer";
import React, { useState, useEffect } from "react";
import Addtodo from "./Mycomp/Addtodo";
import { BrowserRouter, Routes, Route, useAsyncError } from "react-router-dom";
import Login from "./Mycomp/Login";
import Update from "./Mycomp/Update";
import SignUp from "./Mycomp/SignUp";
import { auth, db } from "./firebase";
import { signOut } from "firebase/auth";
import { doc, setDoc, getDoc, updateDoc, deleteDoc, collection, query, where, getDocs } from "firebase/firestore";
import PrivateRoute from "./Mycomp/PrivateRoute";

function App() {
  const [todos, settodos] = useState([]);
  const [Reqsearch, setReqsearch] = useState("");
  const [SnoToUdate, setSnoToUdate] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isUserloggedin, setIsuserloggedin] = useState(false);
  const [Username, setUsername] = useState("");

  const login = (Username, Password) => {
    console.log(Username);
    console.log(Password);
  };

  const signup = (Username, Password) => {
    console.log(Username);
    console.log(Password);
  };

  const onDelete = async (todo) => {
    try {
      await deleteDoc(doc(collection(db, 'users', auth.currentUser.uid, 'todos'), todo.id));
      settodos(todos.filter((e) => e !== todo));
    } catch (error) {
      console.error('Error deleting todo: ', error);
    }
  };

  const onUpdate = async (sno, title, desc) => {
    try {
      await updateDoc(doc(collection(db, 'users', auth.currentUser.uid, 'todos'), sno), { title, desc });
      settodos(todos.map((todo) => (todo.sno === sno ? { ...todo, title, desc } : todo)));
    } catch (error) {
      console.error('Error updating todo: ', error);
    }
  };

  const addtodo = async (title, desc) => {
    try {
      const sno = todos.length === 0 ? 1 : todos[todos.length - 1].sno + 1;
      const newTodo = { sno, title, desc };
      await setDoc(doc(collection(db, 'users', auth.currentUser.uid, 'todos'), sno.toString()), newTodo);
      settodos([...todos, newTodo]);
    } catch (error) {
      console.error('Error adding todo: ', error);
    }
  };

  const search = (Reqsearch) => {
    setReqsearch(Reqsearch);
  };

  const signOutUser = () => {
    signOut(auth).then(() => {
      alert("Sign Out Succesful");
      setIsuserloggedin(false);
      setUsername("Default");
    });
  };

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((user) => {
      if (user) {
        setIsuserloggedin(true);
        setUsername(user.displayName);
        // Load user todos from Firestore
        try {
          const q = query(collection(db, 'users', auth.currentUser.uid, 'todos'));
          const querySnapshot =  getDocs(q);
          const userTodos = [];
          querySnapshot.forEach((doc) => {
            userTodos.push({ id: doc.id, ...doc.data() });
          });
          settodos(userTodos);
        } catch (error) {
          console.error('Error loading user todos: ', error);
        }
      } else {
        setIsuserloggedin(false);
        setUsername("");
        settodos([]);
      }
      setLoading(false); // Set loading to false after checking auth state
    });

    return () => unsubscribe();
  }, []);

  if (loading) {
    return <div>Loading...</div>; // Show loading spinner or placeholder content
  }

  return (
    <>
      <BrowserRouter>
        <Header
          title="To-Do Web App"
          search={search}
          isUserloggedin={isUserloggedin}
          Username={Username}
          signOutUser={signOutUser}
        />
        <Routes>
          <Route
            path="/"
            element={
              <PrivateRoute isUserLoggedIn={isUserloggedin}>
                <Todos
                  todos={todos}
                  onDelete={onDelete}
                  onUpdate={onUpdate}
                  Reqsearch={Reqsearch}
                />
              </PrivateRoute>
            }
          />
          <Route path="/login" element={<Login login={login} />} />
          <Route path="/SignUp" element={<SignUp signup={signup} />} />
          <Route
            path="/addtodo"
            element={
              <PrivateRoute isUserLoggedIn={isUserloggedin}>
                <Addtodo addtodo={addtodo} />
              </PrivateRoute>
            }
          />
        </Routes>
        <Footer />
      </BrowserRouter>
    </>
  );
}

export default App;